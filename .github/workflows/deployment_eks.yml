on:
  workflow_call:
    inputs:
      bu:
        required: true
        type: string
        description: 'business unit name'
      environment:
        required: true
        type: string
      service_name:
        required: true
        type: string
        description: 'service name, also will be used as ecr repo name'
      config_path:
        required: false
        type: string
        default: 'iac/service.config.yml'
      with_db_migration:
        required: false
        type: boolean
        default: false
      with_seeder:
        required: false
        type: string
        default: 'false'
      lang:
        required: false
        type: string
        description: 'Programming language that used by service'
      db_migration_path:
        description:  "The path to migration folder."
        required: false
        type: string
        default: "database/migrations"
      db_seeder_path:
        description: "The path to seeder folder"
        required: false
        default: "database/seeder"
        type: string
      node_version:
        description: "The version of node."
        required: false
        type: string
        default: '12'
      go_version:
        description: "Golang version"
        required: false
        type: string
        default: '^1.17.5'
      db_name_key:
        description: "db name"
        required: false
        type: string
      db_host_key:
        description: "db_host_key"
        required: false
        type: string
      db_user_key:
        description: "db_user_key"
        required: false
        type: string
      db_password_key:
        description: "db_password_key"
        required: false
        type: string
      consumer:
        description: "set true if you need to deploy a consumer service"
        required: false
        type: boolean
        default: false
      ecr_name:
        description: "overide service_name as ecr_name"
        required: false
        type: string
      ecr_region:
        description: "ECR AWS Region"
        required: false
        type: string
      with_ca_crt:
        description: "provide option to insert ca.crt file from github secrets"
        required: false
        type: boolean
        default: false
      dockerfile:
        required: false
        type: string
        description: 'docker file'
      ssm_folder:
        required: false
        type: string
        description: 'ssm folder'
    secrets:
      token_github:
        required: true
      ca_crt:
        required: false

name: Deployment Pipeline
jobs:
  config: 
    name: Generate Config 
    runs-on: [ self-hosted, eks-runner ]
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      eks_cluster: ${{ steps.config.outputs.eks_cluster }}
      namespace: ${{ steps.config.outputs.namespace }}
      build_role_arn: ${{ steps.config.outputs.build_role_arn }}
      deploy_role_arn: ${{ steps.config.outputs.deploy_role_arn }}
      aws_region: ${{ steps.config.outputs.aws_region }}
      ssm_role_arn: ${{ steps.config.outputs.ssm_role_arn }}
      ssm_path: ${{ steps.config.outputs.ssm_path }}
      node_env: ${{ steps.config.outputs.node_env }}
    steps:
      - name: Checkout Generate Config Action Repo
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/generate-config-action
          token: ${{ secrets.token_github }}
          path: .github/actions/generate-config-action
      
      - name: Generate Config
        uses: ./.github/actions/generate-config-action
        id: config
        with:
          bu: ${{ inputs.bu }}
          environment: ${{ inputs.environment }}
          service_name: ${{ inputs.service_name }}
          ssm_folder: ${{ inputs.ssm_folder }}

  db_migration:
    name: DB Migration
    needs: config
    runs-on: [ self-hosted, eks-runner ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Checkout Goose Migration Action Repo
        if: inputs.with_db_migration == true && inputs.lang == 'golang'
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/goose-migration-action
          token: ${{ secrets.token_github }}
          path: .github/actions/goose-migration-action
          ref: improve/action

      - uses: ./.github/actions/goose-migration-action
        if: inputs.with_db_migration == true && inputs.lang == 'golang'
        with:
          role_to_assume: ${{ needs.config.outputs.ssm_role_arn}}
          parameter_path: ${{ needs.config.outputs.ssm_path }}
          db_name_key: ${{ inputs.db_name_key }}
          db_host_key: ${{ inputs.db_host_key }}
          db_user_key: ${{ inputs.db_user_key }}
          db_password_key: ${{ inputs.db_password_key }}
          db_migration_path: ${{ inputs.db_migration_path }}
          with_seeder: ${{ inputs.with_seeder }}
          db_seeder_path: ${{ inputs.db_seeder_path }}
          go_version: ${{ inputs.go_version }}
      
      - name: Checkout Knex Migration Action Repo
        if: inputs.with_db_migration == true && inputs.lang == 'nodejs'
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/knex-migration-action
          token: ${{ secrets.token_github }}
          path: .github/actions/knex-migration-action
          ref: improve/action

      - uses: ./.github/actions/knex-migration-action
        if: inputs.with_db_migration == true && inputs.lang == 'nodejs'
        env:
          NODE_ENV: ${{ needs.config.outputs.node_env }}
        with:
          role_to_assume: ${{ needs.config.outputs.ssm_role_arn}}
          parameter_path: ${{ needs.config.outputs.ssm_path }}
          db_name_key: ${{ inputs.db_name_key }}
          db_host_key: ${{ inputs.db_host_key }}
          db_user_key: ${{ inputs.db_user_key }}
          db_password_key: ${{ inputs.db_password_key }}
          with_seeder: ${{ inputs.with_seeder }}
          node_version: ${{ inputs.node_version }}

  build:
    name: Build Image
    needs: [ config, db_migration ]
    runs-on: [ self-hosted, eks-runner ]
    outputs:
      image_registry: ${{ steps.publish_image.outputs.image_registry }}
      image_tag: ${{ (inputs.consumer == true && format('{0}-{1}', 'consumer', github.sha)) || github.sha}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout ECR Publish GitHub Action Repo
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/ecr-publish-action
          token: ${{ secrets.token_github }}
          path: .github/actions/ecr-publish-action
      
      - name: Inject CA CERT File
        if: inputs.with_ca_crt == true
        shell: bash
        run: |
          echo "${{ secrets.ca_crt }}" > ca.crt

      - name: Build and Push Image
        uses: ./.github/actions/ecr-publish-action
        id: publish_image
        with:
          aws-region: ${{ inputs.ecr_region || needs.config.outputs.aws_region }}
          ecr_name: ${{ inputs.ecr_name || inputs.service_name}}
          role-to-assume: ${{ needs.config.outputs.build_role_arn }}
          dockerfile: ${{ (inputs.dockerfile != '' && inputs.dockerfile) || 'Dockerfile' }}
          ecr_cache_tag: ${{ (inputs.consumer == true && format('{0}-{1}', 'consumer-latest', needs.config.outputs.environment)) || format('{0}-{1}', 'latest', needs.config.outputs.environment) }}
          build_args: |
            GITHUB_TOKEN=${{ secrets.token_github }}
            CONSUMER=${{ inputs.consumer }}
          custom_tags: |
            ${{ (inputs.consumer == true && format('{0}-{1}', 'consumer-latest', needs.config.outputs.environment)) || format('{0}-{1}', 'latest', needs.config.outputs.environment)}}
            ${{ (inputs.consumer == true && format('{0}-{1}', 'consumer', github.sha)) || github.sha}}

  deploy:
    name: Deploy Service
    needs: [ config, build ]
    runs-on: [self-hosted, eks-runner]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout GitHub Action Repo
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/setup-eks-helm-action
          token: ${{ secrets.token_github }}
          path: .github/actions/setup-eks-helm-action

      - uses: ./.github/actions/setup-eks-helm-action
        with:
          aws-region: ${{ needs.config.outputs.aws_region }}
          role-to-assume: ${{ needs.config.outputs.deploy_role_arn }}
          github-token: ${{ secrets.token_github }}
          cluster-name: ${{ needs.config.outputs.eks_cluster }}
      
      - name: Checkout SSM Injection
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/helm-values-ssm-injection
          token: ${{ secrets.token_github }}
          path: .github/actions/helm-values-ssm-injection
      
      - name: SSM Injection
        id: values
        uses: ./.github/actions/helm-values-ssm-injection
        with:
          image: ${{ needs.build.outputs.image_registry }}/${{ inputs.ecr_name || inputs.service_name }}:${{ needs.build.outputs.image_tag }}
          environment: ${{ (inputs.consumer == true && format('{0}_{1}', needs.config.outputs.environment, 'consumer')) || needs.config.outputs.environment}}
          configPath: ${{ inputs.config_path }}
          serviceName: ${{ inputs.service_name }}
 
      - name: Deploy service
        shell: bash
        run: |
          helm upgrade --install --atomic --wait --namespace ${{ needs.config.outputs.namespace }} --create-namespace ${{ inputs.service_name }} .charts/charts/service -f ${{ steps.values.outputs.values }}